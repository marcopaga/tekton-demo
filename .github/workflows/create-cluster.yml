name: create-cluster

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set output
        id: vars
        run: echo ::set-output name=branch_name::${GITHUB_REF#refs/*/}

      - name: Install K3d (see https://k3d.io/#installation), Flux, Tekton CLI & jq
        run: |
          brew install fluxcd/tap/flux
          brew install k3d
          brew tap tektoncd/tools
          brew install tektoncd/tools/tektoncd-cli
          brew install jq

      - name: Bootstrap K3d
        run: |
          k3d cluster create -p "8081:80@loadbalancer" --agents 2

      # See creation of Personal Access Token at https://fluxcd.io/docs/cmd/flux_bootstrap_github/
      - name: Install Flux into K3d cluster & connect to GitHub repository https://github.com/marcopaga/tekton-demo
        run: |
          GITHUB_TOKEN=${{ secrets.FLUX_GITHUB_TOKEN }} flux bootstrap github \
          --owner=${{ github.repository_owner }} \
          --repository=${{ github.event.repository.name }} \
          --branch=${{ steps.vars.outputs.branch_name }} \
          --private=false \
          --personal=true \
          --token-auth \
          --path=clusters/local

      - name: Wait for Flux CRD Deployment
        timeout-minutes: 3
        continue-on-error: true
        run: |
          { grep -q -m 1 "kustomizations.kustomize.toolkit.fluxcd.io"; kill $!; } < <(kubectl get crd -w)
          kubectl -n default wait --for condition=established --timeout=180s crd/kustomizations.kustomize.toolkit.fluxcd.io

      - name: Wait for Kustomizations to be ready
        timeout-minutes: 5
        continue-on-error: true
        run: |
          kubectl -n flux-system wait --for=condition=READY=True --timeout=60s kustomizations.kustomize.toolkit.fluxcd.io/flux-system
          kubectl -n flux-system wait --for=condition=READY=True --timeout=60s kustomizations.kustomize.toolkit.fluxcd.io/tekton-base
          kubectl -n flux-system wait --for=condition=READY=True --timeout=60s kustomizations.kustomize.toolkit.fluxcd.io/tekton-tasks
          kubectl -n flux-system wait --for=condition=READY=True --timeout=60s kustomizations.kustomize.toolkit.fluxcd.io/tekton-triggers
          kubectl -n flux-system wait --for=condition=READY=True --timeout=60s kustomizations.kustomize.toolkit.fluxcd.io/tekton-ci-config

      - name: Introspection
        run: |
          kubectl get namespaces
          kubectl get pods --all-namespaces
          kubectl get deployments --all-namespaces
          kubectl get Kustomization -n flux-system

      - name: Show Tekton tasks and pipelines
        run: |
          tkn task list --all-namespaces
          tkn pipeline list --all-namespaces

      - name: Execute and verify hello-world pipeline is run to completion
        run: |
          PIPELINE_RUN_NAME=$(kubectl create -n tekton-pipelines -f ./hello-goodbye-pipeline-run.yaml -o json | jq -r '.metadata.name')
          kubectl -n tekton-pipelines wait --for=condition=SUCCEEDED=True --timeout=60s pipelineruns.tekton.dev/$PIPELINE_RUN_NAME
          tkn pr --namespace tekton-pipelines logs $PIPELINE_RUN_NAME

      - name: Execute and verify Trigger
        run: |
          EVENT_ID=$(./trigger-tekton.sh | jq -r '.eventID')
          echo "EVENT-ID found in the response of the web-hook call${EVENT_ID}"

          # Wait for the triggered PipelineRun to complete
          kubectl -n tekton-pipelines wait --for=condition=SUCCEEDED=True --timeout=60s pipelineruns.tekton.dev -l triggers.tekton.dev/triggers-eventid==$EVENT_ID

          # Get The PipelineRun
          PIPELINE_RUN_NAME=$(kubectl get pipelineruns -ntekton-pipelines -l triggers.tekton.dev/triggers-eventid==$EVENT_ID -o json | jq -r '.items[0].metadata.name')
          echo "Triggered pipeline run found by filering for the eventid label: ${PIPELINE_RUN_NAME}"
          kubectl -n tekton-pipelines wait --for=condition=SUCCEEDED=True --timeout=60s pipelineruns.tekton.dev/$PIPELINE_RUN_NAME

          COMMIT_ID_FROM_GITLAB_PUSH_EVENT_JSON="5aabd8d9b605a80e45a379b987c6b835dc7af1f8"

          # Verify the output
          tkn pr --namespace tekton-pipelines logs $PIPELINE_RUN_NAME | grep ${COMMIT_ID_FROM_GITLAB_PUSH_EVENT_JSON}  || (echo "Commit Id not found";exit 1)
          tkn pr --namespace tekton-pipelines logs $PIPELINE_RUN_NAME | grep "https://github.com/marcopaga/feeding-the-ci-process-single-project.git"  || (echo "Repository not found";exit 1)
